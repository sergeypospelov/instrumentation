dependencies {
    classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
    classpath group: 'org.jetbrains.kotlin', name: 'kotlin-allopen', version: kotlin_version
}

subprojects {
    group = rootProject.group
    version = rootProject.version

    apply plugin: 'base'
}

apply plugin: 'java'
apply plugin: 'kotlin'

dependencies {
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: coroutines_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-collections-immutable-jvm', version: collections_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version

    testImplementation("org.junit.jupiter:junit-jupiter:$junit5_version"){
        force = true
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs += ["-Xallow-result-return-type"]
        allWarningsAsErrors = false
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs += ["-Xallow-result-return-type"]
        allWarningsAsErrors = false
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava {
    options.compilerArgs << '-Werror' << '-Xlint:all'
    options.encoding = 'UTF-8'
}

compileTestJava {
//    options.compilerArgs << '-Werror' << '-Xlint:all'
//    options.encoding = 'UTF-8'
}

test {
    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "2048m"

    useJUnitPlatform() {
        excludeTags 'slow', 'IntegrationTest'
    }

    afterTest { descriptor, result ->
        println "[$descriptor.classDisplayName] [$descriptor.displayName]: $result.resultType"
    }

    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Test summary: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

dependencies {
    implementation project(':utbot-framework-api')

    implementation group: 'org.ow2.asm', name: 'asm', version: asm_version
    implementation group: 'org.ow2.asm', name: 'asm-commons', version: asm_version
    implementation group: 'com.esotericsoftware', name: 'kryo', version: kryo_version
    // this is necessary for serialization of some collections
    implementation group: 'de.javakaffee', name: 'kryo-serializers', version: kryo_serializers_version
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlin_logging_version
}

jar {
    manifest {
        attributes (
                'Main-Class': 'com.huawei.utbot.instrumentation.process.ChildProcessKt',
                'Premain-Class': 'com.huawei.utbot.instrumentation.agent.Agent',
        )
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}